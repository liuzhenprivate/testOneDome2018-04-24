package com.sinontech.controller.read.htmlmodle;

import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.session.Session;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.sinontech.controller.base.BaseController;
import com.sinontech.entity.Page;
import com.sinontech.entity.read.Article;
import com.sinontech.entity.read.Html;
import com.sinontech.entity.read.HtmlModle;
import com.sinontech.entity.read.HtmlModleDetail;
import com.sinontech.entity.system.User;
import com.sinontech.util.AppUtil;
import com.sinontech.util.ObjectExcelView;
import com.sinontech.util.Const;
import com.sinontech.util.PageData;
import com.sinontech.util.Tools;
import com.sinontech.util.Jurisdiction;
import com.sinontech.service.read.html.HtmlService;
import com.sinontech.service.read.htmlmodle.HtmlmodleService;
import com.sinontech.service.read.htmlmodledetail.HtmlmodleDetailService;
import com.sinontech.service.read.webchat.WebchatService;

/** 
 * 类名称：HtmlmodleController
 * 创建人：FH 
 * 创建时间：2018-03-02
 */
@Controller
@RequestMapping(value="/htmlmodle")
public class HtmlmodleController extends BaseController {
	
	String menuUrl = "html/list.do"; //菜单地址(权限用)
	@Resource(name="htmlmodleService")
	private HtmlmodleService htmlmodleService;
	@Resource(name="htmlService")
	private HtmlService htmlService;
	@Resource(name="htmlmodledetailService")
	private HtmlmodleDetailService htmlmodledetailService;
	@Resource(name="webchatService")
	private WebchatService webchatService;
	
	@RequestMapping(value="/lookhtml")
	public ModelAndView lookhtml(HttpServletRequest request,HttpServletResponse response) throws Exception{
		logBefore(logger, "look Htmlmodle");
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		Subject currentUser = SecurityUtils.getSubject();  //shiro管理的session
		Session session = currentUser.getSession();
		Html html = new Html();
		String HTML_ID =  String.valueOf(pd.get("HTML_ID")) ;
		PageData htmlpd = this.htmlService.findById(pd);
		if(null!=htmlpd){
			html = getHtmlByPd(htmlpd);
				List<PageData> list = this.htmlmodleService.listAll(htmlpd);
				if(null!=list && list.size()>0){
					List<HtmlModle> htmlmodlelist = new ArrayList<HtmlModle>();
					for(PageData htmlmodlepd:list){
						HtmlModle htmlmodle = getHtmlModleByPd(htmlmodlepd);
						htmlmodle.setHtml(html);
						List<PageData> modlelist = this.htmlmodledetailService.listAll(htmlmodlepd);
						if(null!=modlelist){
							List<HtmlModleDetail> htmlmodledetaillist = new ArrayList<HtmlModleDetail>();
							for(PageData htmlmodledetailpd:modlelist){
								HtmlModleDetail htmlModleDetail = getHtmlModleDetailByPd(htmlmodledetailpd);
								htmlmodledetaillist.add(htmlModleDetail);
							}
							htmlmodle.setHtmlModleDetaillist(htmlmodledetaillist); 
						}
						htmlmodlelist.add(htmlmodle);
					}
					html.setHtmlmodles(htmlmodlelist);
				}
		}
		
		mv.addObject("HTML_ID", HTML_ID);
		session.setAttribute("HTML"+HTML_ID, html);
			
		mv.setViewName("reader/htmlmodle/htmlmodle_list");
		mv.addObject("pd", pd);
		
		return mv;
	}
	
	
	public HtmlModleDetail getHtmlModleDetailByPd(PageData pd){
		HtmlModleDetail htmlModleDetail = new HtmlModleDetail();
		if(null!=pd){
			try {
				long id = Long.parseLong(String.valueOf(pd.get("HTMLMODLE_DETAIL_ID")));
				htmlModleDetail.setId(id);
			} catch (NumberFormatException e) {
			}
			try {
				long htmlmodleId = Long.parseLong(String.valueOf(pd.get("HTMLMODLE_ID")));
				htmlModleDetail.setHtmlmodleId(htmlmodleId);;
			} catch (NumberFormatException e) {
			}
			
			String title = String.valueOf(pd.get("TITLE"));
			htmlModleDetail.setTitle(title);
			
			String subhead = String.valueOf(pd.get("SUBHEAD"));
			htmlModleDetail.setSubhead(subhead);
			
			String content = String.valueOf(pd.get("CONTENT"));
			htmlModleDetail.setContent(content);
			
			String imgUrl = String.valueOf(pd.get("IMG_URL"));
			htmlModleDetail.setImgUrl(imgUrl);
			
			String htmlUrl = String.valueOf(pd.get("HTML_URL"));
			htmlModleDetail.setHtmlUrl(htmlUrl);
			
			try {
				int htmlType = Integer.parseInt(String.valueOf(pd.get("HTML_TYPE")));
				htmlModleDetail.setHtmlType(htmlType);
			} catch (NumberFormatException e) {
			}
			try {
				int sort  = Integer.parseInt(String.valueOf(pd.get("SORT")));
				htmlModleDetail.setSort(sort);
			} catch (NumberFormatException e) {
			}
			try {
				long articleID = Long.parseLong(String.valueOf(pd.get("ARTICLE_ID")));
				htmlModleDetail.setArticleID(articleID);;
			} catch (NumberFormatException e) {
			}
			String memo = String.valueOf(pd.get("MEMO"));
			htmlModleDetail.setMemo(memo);
			String createTime = String.valueOf(pd.get("CREATE_TIME"));
			htmlModleDetail.setCreateTime(createTime);
		}
		return htmlModleDetail;
	}
	
	
	public HtmlModle getHtmlModleByPd(PageData pd){
		HtmlModle htmlmodle = new HtmlModle();
		if(null!=pd){
			try {
				long id = Long.parseLong(String.valueOf(pd.get("HTMLMODLE_ID")));
				htmlmodle.setId(id);
			} catch (NumberFormatException e) {
			}
			try {
				int place = Integer.parseInt(String.valueOf(pd.get("PLACE")));
				htmlmodle.setPlace(place);
			} catch (NumberFormatException e) {
			}
			
			String divClass = String.valueOf(pd.get("DIV_CLASS"));
			htmlmodle.setDivClass(divClass);
			try {
				int modleType = Integer.parseInt(String.valueOf(pd.get("MODLE_TYPE")));
				htmlmodle.setModleType(modleType);;
			} catch (NumberFormatException e) {
			}
			String createTime = String.valueOf(pd.get("CREATE_TIME"));
			htmlmodle.setCreateTime(createTime);
			
			
		}
		return htmlmodle;
	}
	public Html getHtmlByPd(PageData pd){
		Html html = new Html();
		if(null!=pd){
			try {
				long id = Long.parseLong(String.valueOf(pd.get("HTML_ID")));
				html.setId(id);
			} catch (NumberFormatException e) {
			}
			 
			try {
				int placType = Integer.parseInt(String.valueOf(pd.get("PLACE_TYPE")));
				html.setPlacType(placType);
			} catch (NumberFormatException e) {
			}
			
			String name = String.valueOf(pd.get("NAME"));
			html.setName(name);
			try {
				int htmlType = Integer.parseInt(String.valueOf(pd.get("HTML_TYPE")));
				html.setHtmlType(htmlType);
			} catch (NumberFormatException e) {
			}
			try {
				int state  = Integer.parseInt(String.valueOf(pd.get("STATE")));
				html.setState(state);
			} catch (NumberFormatException e) {
			}
			String htmlUrl = String.valueOf(pd.get("HTML_URL"));
			html.setHtmlUrl(htmlUrl);;
			try {
				long pvs = Long.parseLong(String.valueOf(pd.get("PVS")));
				html.setPvs(pvs);
			} catch (NumberFormatException e) {
			}
			String memo = String.valueOf(pd.get("MEMO"));
			html.setMemo(memo);
			String createTime = String.valueOf(pd.get("CREATE_TIME"));
			html.setCreateTime(createTime);
		}
		return html;
	}
	
	public Article getArticleByPd(PageData pd){
		Article article = new Article();
		if(null!=pd){
			try {
				long id = Long.parseLong(String.valueOf(pd.get("ARTICLE_ID")));
				article.setId(id);
			} catch (NumberFormatException e) {
			}
			try {
				long articleCategoryId = Long.parseLong(String.valueOf(pd.get("ARTICLE_CATEGORY_ID")));
				article.setArticleCategoryId(articleCategoryId);
			} catch (NumberFormatException e) {
			}
			String articleCode = String.valueOf(pd.get("ARTICLE_CODE"));
			article.setArticleCode(articleCode);
			String author = String.valueOf(pd.get("AUTHOR"));
			article.setAuthor(author);
			String articleName = String.valueOf(pd.get("ARTICLE_NAME"));
			article.setArticleName(articleName);
			try {
				int feeType = Integer.parseInt(String.valueOf(pd.get("FEE_TYPE")));
				article.setFeeType(feeType);
			} catch (NumberFormatException e) {
			}
			try {
				long payConsumes = Long.parseLong(String.valueOf(pd.get("PAY_WAY")));
				article.setPayConsumes(payConsumes);
			} catch (NumberFormatException e) {
			}
			try {
				long payConsumes = Long.parseLong(String.valueOf(pd.get("PAY_CONSUMES")));
				article.setPayConsumes(payConsumes);
			} catch (NumberFormatException e) {
			}
			try {
				int isHost = Integer.parseInt(String.valueOf(pd.get("IS_HOT")));
				article.setIsHost(isHost);
			} catch (NumberFormatException e) {
			}
			String summary = String.valueOf(pd.get("SUMMARY"));
			article.setSummary(summary);
			try {
				int countLetter = Integer.parseInt(String.valueOf(pd.get("COUNT_LETTER")));
				article.setCountLetter(countLetter);
			} catch (NumberFormatException e) {
			}
			try {
				int countChapters = Integer.parseInt(String.valueOf(pd.get("COUNT_CHAPTERS")));
				article.setCountChapters(countChapters);
			} catch (NumberFormatException e) {
			}
			try {
				int state  = Integer.parseInt(String.valueOf(pd.get("STATE")));
				article.setState(state);
			} catch (NumberFormatException e) {
			}
			
			try {
				int collection  = Integer.parseInt(String.valueOf(pd.get("COLLECTION")));
				article.setCollection(collection);
			} catch (NumberFormatException e) {
			}
			try {
				int readers  = Integer.parseInt(String.valueOf(pd.get("READERS")));
				article.setReaders(readers);
			} catch (NumberFormatException e) {
			}
			try {
				int displayReaders  = Integer.parseInt(String.valueOf(pd.get("DISPLAY_READERS")));
				article.setDisplayReaders(displayReaders);
			} catch (NumberFormatException e) {
			}
			
			try {
				long countConsumes = Long.parseLong(String.valueOf(pd.get("COUNT_CONSUMES")));
				article.setCountConsumes(countConsumes);
			} catch (NumberFormatException e) {
			}
			try {
				int channelType  = Integer.parseInt(String.valueOf(pd.get("CHANNEL_TYPE")));
				article.setChannelType(channelType);
			} catch (NumberFormatException e) {
			}
			try {
				int serialState  = Integer.parseInt(String.valueOf(pd.get("SERIAL_STATE")));
				article.setSerialState(serialState);
			} catch (NumberFormatException e) {
			}
			
			String bookCover = String.valueOf(pd.get("BOOK_COVER"));
			article.setBookCover(bookCover);
			try {
				int recommend  = Integer.parseInt(String.valueOf(pd.get("RECOMMEND")));
				article.setRecommend(recommend);
			} catch (NumberFormatException e) {
			}
			String createTime = String.valueOf(pd.get("CREATE_TIME"));
			article.setCreateTime(createTime);
		}
		return article;
	}
	/**
	 * 新增
	 */
	@RequestMapping(value="/save")
	public ModelAndView save() throws Exception{
		logBefore(logger, "新增Htmlmodle");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "add")){return null;} //校验权限
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		pd.put("HTMLMODLE_ID", this.get32UUID());	//主键
		htmlmodleService.save(pd);
		mv.addObject("msg","success");
		mv.setViewName("save_result");
		return mv;
	}
	
	/**
	 * 删除
	 */
	@RequestMapping(value="/delete")
	public void delete(PrintWriter out){
		logBefore(logger, "删除Htmlmodle");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "del")){return;} //校验权限
		PageData pd = new PageData();
		try{
			pd = this.getPageData();
			htmlmodleService.delete(pd);
			out.write("success");
			out.close();
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		
	}
	
	/**
	 * 修改
	 */
	@RequestMapping(value="/edit")
	public ModelAndView edit() throws Exception{
		logBefore(logger, "修改Htmlmodle");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "edit")){return null;} //校验权限
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		htmlmodleService.edit(pd);
		mv.addObject("msg","success");
		mv.setViewName("save_result");
		return mv;
	}
	
	/**
	 * 列表
	 */
	@RequestMapping(value="/list")
	public ModelAndView list(Page page){
		logBefore(logger, "列表Htmlmodle");
		//if(!Jurisdiction.buttonJurisdiction(menuUrl, "cha")){return null;} //校验权限
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		try{
			pd = this.getPageData();
			page.setPd(pd);
			List<PageData>	varList = htmlmodleService.list(page);	//列出Htmlmodle列表
			mv.setViewName("read/htmlmodle/htmlmodle_list");
			mv.addObject("varList", varList);
			mv.addObject("pd", pd);
			mv.addObject(Const.SESSION_QX,this.getHC());	//按钮权限
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		return mv;
	}
	
	/**
	 * 去新增页面
	 */
	@RequestMapping(value="/goAdd")
	public ModelAndView goAdd(){
		logBefore(logger, "去新增Htmlmodle页面");
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		try {
			mv.setViewName("read/htmlmodle/htmlmodle_edit");
			mv.addObject("msg", "save");
			mv.addObject("pd", pd);
		} catch (Exception e) {
			logger.error(e.toString(), e);
		}						
		return mv;
	}	
	
	/**
	 * 去修改页面
	 */
	@RequestMapping(value="/goEdit")
	public ModelAndView goEdit(){
		logBefore(logger, "去修改Htmlmodle页面");
		ModelAndView mv = this.getModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		try {
			pd = htmlmodleService.findById(pd);	//根据ID读取
			mv.setViewName("read/htmlmodle/htmlmodle_edit");
			mv.addObject("msg", "edit");
			mv.addObject("pd", pd);
		} catch (Exception e) {
			logger.error(e.toString(), e);
		}						
		return mv;
	}	
	
	/**
	 * 批量删除
	 */
	@RequestMapping(value="/deleteAll")
	@ResponseBody
	public Object deleteAll() {
		logBefore(logger, "批量删除Htmlmodle");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "dell")){return null;} //校验权限
		PageData pd = new PageData();		
		Map<String,Object> map = new HashMap<String,Object>();
		try {
			pd = this.getPageData();
			List<PageData> pdList = new ArrayList<PageData>();
			String DATA_IDS = pd.getString("DATA_IDS");
			if(null != DATA_IDS && !"".equals(DATA_IDS)){
				String ArrayDATA_IDS[] = DATA_IDS.split(",");
				htmlmodleService.deleteAll(ArrayDATA_IDS);
				pd.put("msg", "ok");
			}else{
				pd.put("msg", "no");
			}
			pdList.add(pd);
			map.put("list", pdList);
		} catch (Exception e) {
			logger.error(e.toString(), e);
		} finally {
			logAfter(logger);
		}
		return AppUtil.returnObject(pd, map);
	}
	
	/*
	 * 导出到excel
	 * @return
	 */
	@RequestMapping(value="/excel")
	public ModelAndView exportExcel(){
		logBefore(logger, "导出Htmlmodle到excel");
		if(!Jurisdiction.buttonJurisdiction(menuUrl, "cha")){return null;}
		ModelAndView mv = new ModelAndView();
		PageData pd = new PageData();
		pd = this.getPageData();
		try{
			Map<String,Object> dataMap = new HashMap<String,Object>();
			List<String> titles = new ArrayList<String>();
			titles.add("页面ID");	//1
			titles.add("样式");	//2
			titles.add("模板类型");	//3
			titles.add("创建时间");	//4
			dataMap.put("titles", titles);
			List<PageData> varOList = htmlmodleService.listAll(pd);
			List<PageData> varList = new ArrayList<PageData>();
			for(int i=0;i<varOList.size();i++){
				PageData vpd = new PageData();
				vpd.put("var1", varOList.get(i).getString("HTML_ID"));	//1
				vpd.put("var2", varOList.get(i).getString("DIV_CLASS"));	//2
				vpd.put("var3", varOList.get(i).getString("MODLE_TYPE"));	//3
				vpd.put("var4", varOList.get(i).getString("CREATE_TIME"));	//4
				varList.add(vpd);
			}
			dataMap.put("varList", varList);
			ObjectExcelView erv = new ObjectExcelView();
			mv = new ModelAndView(erv,dataMap);
		} catch(Exception e){
			logger.error(e.toString(), e);
		}
		return mv;
	}
	
	/* ===============================权限================================== */
	public Map<String, String> getHC(){
		Subject currentUser = SecurityUtils.getSubject();  //shiro管理的session
		Session session = currentUser.getSession();
		return (Map<String, String>)session.getAttribute(Const.SESSION_QX);
	}
	/* ===============================权限================================== */
	
	@InitBinder
	public void initBinder(WebDataBinder binder){
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(format,true));
	}
}
